# 项目名称，必填，唯一，简洁太长，由英文、数字、-、_组成，不能有其他字符
# 后续作为docker image、helm chart的名称，yaml配置部署相关会用到
name: java-project
# 项目版本号，必填，遵循 Semver 规范 (https://semver.org) -> 主版本号.次版本号.修订号
# 将作为docker image的Tag
version: 0.0.1
# 项目简介，必填，一句话说明，yaml配置部署相关会用到
description: 项目简介
# 项目语言，选填，作为元数据（metadata）配置放到相关部署yaml
programLanguage: java
# 项目分组，选填，harbor里面的项目名称，给docker image归类，相同分类的项目docker image会放在一起
# 所有分类：查看harbor上的项目列表
# 新增分类：去harbor上新建项目
# harbor: http://registry.lan-network.net
group: java-repos
# 项目构建流程
# build-image: 构建docker image, dockerfile -> image -> push dockerhub
# shell-spec: 标准shell构建，完全使用hook来组装流程
# svc-spec: 通用后端项目构建，dockerfile -> image -> push dockerhub -> helm deploy to k8s
# web-spec: 标准前端项目构建，nodejs -> dist + dockerfile -> image -> push dockerhub -> helm deploy to k8s
# 后端扩展：
# php-spec: 标准php构建，composer + dockerfile -> image -> push dockerhub -> helm deploy to k8s
# java-spec: 标准java构建，maven -> jar + dockerfile -> image -> push dockerhub -> helm deploy to k8s
# go-spec: 标准go构建，go -> binary + dockerfile -> image -> push dockerhub -> helm deploy to k8s
pipeline: web-spec

# 项目构建配置
build:
  # 用于build项目的docker镜像
  image: node:18.0-alpine3.15
  # 命令列表，使用 {buildImage} 来执行
  commands:
    - npm install --registry=https://registry.npmmirror.com
    - npm run build
    - npm run test


# Hook，直接执行 shell，用来扩展增强构建流程
pipelineHook:
  buildBefore: |
    echo 'hook:buildBefore'
  buildAfter: |
    echo 'hook:buildAfter'
  dockerBefore: |
    echo 'hook:dockerBefore'
  dockerAfter: |
    echo 'hook:dockerAfter'
  deployBefore: |
    echo 'hook:deployBefore'
  deployAfter: |
    echo 'hook:deployAfter'


# 测试环境构建结果Copy
testCopy:
  # 构建结果重命名，默认与name相同
  nameOverride: ""
  # 复制结果到指定git仓库
  git: ""
  # git仓库分支，默认master
  branch: ""
  # 复制结果到指定目录
  path: ""
# 生成环境构建结果Copy
releaseCopy:
  # 构建结果重命名，默认与name相同
  nameOverride: ""
  # 复制结果到指定git仓库
  git: ""
  # git仓库分支，默认master
  branch: ""
  # 复制结果到指定目录
  path: ""